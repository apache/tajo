/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


option java_package = "org.apache.tajo.ipc";
option java_outer_classname = "TajoResourceTrackerProtocol";
option java_generic_services = true;
option java_generate_equals_and_hash = true;

import "QueryCoordinatorProtocol.proto";
import "ContainerProtocol.proto";
import "tajo_protos.proto";
import "TajoIdProtos.proto";

package hadoop.yarn;

// deprecated
message NodeHeartbeat {
  required WorkerConnectionInfoProto connectionInfo = 1;
  optional ServerStatusProto serverStatus = 2;
  optional string statusMessage = 3;
}

message NodeHeartbeatRequestProto {
  required int32 workerId = 1;
  optional NodeResourceProto totalResource = 2;
  optional NodeResourceProto availableResource = 3;
  optional WorkerConnectionInfoProto connectionInfo = 4;
  optional NodeStatusProto status = 5;
}

message NodeHeartbeatResponseProto {
  required ResponseCommand command = 1 [default = NORMAL];
  repeated QueryIdProto queryId = 2;
}

enum ResponseCommand {
  NORMAL = 1; //ping
  MEMBERSHIP = 2; // request membership to worker node
  ABORT_QUERY = 3; //query master failure
  SHUTDOWN = 4; // black list
}

//TODO add node health information
message NodeStatusProto {
}

service TajoResourceTrackerProtocolService {
  rpc heartbeat(NodeHeartbeat) returns (TajoHeartbeatResponse);
  rpc nodeHeartbeat(NodeHeartbeatRequestProto) returns (NodeHeartbeatResponseProto);
}