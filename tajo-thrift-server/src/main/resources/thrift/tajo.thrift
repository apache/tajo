/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// ----------------------------------------------------------------
// tajo.thrift
//
// This is a Thrift interface definition file for the Tajo service.
// Target language libraries for C++, Java, Ruby, PHP, (and more) are
// generated by running this file through the Thrift compiler with the
// appropriate flags. The Thrift compiler binary and runtime
// libraries for various languages are available
// from the Apache Incubator (http://thrift.apache.org/)
// ----------------------------------------------------------------

namespace java org.apache.tajo.thrift.generated
namespace cpp  apache.tajo.thrift
namespace rb Apache.Tajo.Thrift
namespace py tajo
namespace perl Tajo
namespace php Tajo

exception TServiceException {
  1:string message,
  2:string trace
}

enum TResultCode {
  OK = 0,
  ERROR = 1
}

struct TColumn {
  1:string name,
  2:string dataType
}

struct TSchema {
  1:list<TColumn> columns
}

struct TTableStats {
  1:i64 numRows,
  2:i64 numBytes,
  3:i32 numBlocks,
  4:i32 numShuffleOutputs,
  5:i64 avgRows,
  6:i64 readBytes
}

struct TPartitionMethod {
  1:string tableName,
  2:string partitionType,
  3:string expression,
  4:TSchema expressionSchema
}

struct TTableDesc {
  1:string tableName,
  2:string path;
  3:string storeType,
  4:map<string, string> tableMeta,
  5:TSchema schema,
  6:TTableStats stats,
  7:TPartitionMethod partition,
  8:bool isExternal
}

struct TQueryResult {
  1:TTableDesc tableDesc,
  2:list<binary> rows,
  3:TSchema schema
}

struct TGetQueryStatusResponse {
  1:string resultCode,
  2:string queryId,
  3:string state,
  4:double progress,
  5:i64 submitTime,
  6:i64 finishTime,
  7:bool hasResult,
  8:string errorMessage,
  9:string errorTrace,
  10:string queryMasterHost,
  11:i32 queryMasterPort,
  12:TQueryResult queryResult;
}

struct TServerResponse {
  1:string resultCode,
  2:bool boolResult,
  3:string errorMessage,
  4:string detailErrorMessage,
  5:string sessionId
}

struct TBriefQueryInfo {
  1:string queryId,
  2:string state,
  3:i64 startTime,
  4:i64 finishTime,
  5:string query,
  6:string queryMasterHost,
  7:i32 queryMasterPort,
  8:double progress
}

service TajoThriftService {
  TGetQueryStatusResponse submitQuery(1: string sessionId, 2: string query, 3:bool isJson) throws (1:TServiceException se);
  TQueryResult getQueryResult(1: string sessionId, 2: string queryId, 3: i32 fetchSize) throws (1:TServiceException se);
  TGetQueryStatusResponse getQueryStatus(1: string sessionId, 2: string queryId) throws (1:TServiceException se);
  TServerResponse closeQuery(1: string sessionId, 2: string queryId) throws (1:TServiceException se);
  TServerResponse updateQuery(1: string sessionId, 2: string query) throws (1:TServiceException se);
  TServerResponse createSession(1: string userId, 2: string defaultDatabase) throws (1:TServiceException se);
  TServerResponse closeSession(1: string sessionId) throws (1:TServiceException se);
  TServerResponse refreshSession(1: string sessionId) throws (1:TServiceException se);
  TServerResponse selectDatabase(1: string sessionId, 2: string database) throws (1:TServiceException se);
  string getCurrentDatabase(1:string sessionId) throws (1:TServiceException se);

  TServerResponse killQuery(1: string sessionId, 2: string queryId) throws (1:TServiceException se);
  list<TBriefQueryInfo> getQueryList(1: string sessionId) throws (1:TServiceException se);

  bool existTable(1: string sessionId, 2: string tableName) throws (1:TServiceException se);
  list<string> getTableList(1: string sessionId, 2: string databaseName) throws (1:TServiceException se);
  TTableDesc getTableDesc(1: string sessionId, 2: string tableName) throws (1:TServiceException se);
  bool dropTable(1: string sessionId, 2: string tableName, 3: bool purge) throws (1:TServiceException se);

  list<string> getAllDatabases(1: string sessionId) throws (1:TServiceException se);
  bool createDatabase(1: string sessionId, 2: string databaseName) throws (1:TServiceException se);
  bool dropDatabase(1: string sessionId, 2: string databaseName) throws (1:TServiceException se);
  bool existDatabase(1: string sessionId, 2: string databaseName) throws (1:TServiceException se);

  map<string, string> getAllSessionVariables(1: string sessionId) throws (1:TServiceException se);
  bool updateSessionVariable(1: string sessionId, 2: string key, 3: string value) throws (1:TServiceException se);
  bool unsetSessionVariables(1:string sessionId, 2:string key) throws (1:TServiceException se);
}
