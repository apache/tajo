/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.tajo.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-12-20")
public class TPartitionMethod implements org.apache.thrift.TBase<TPartitionMethod, TPartitionMethod._Fields>, java.io.Serializable, Cloneable, Comparable<TPartitionMethod> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPartitionMethod");

  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PARTITION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("partitionType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EXPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("expression", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EXPRESSION_SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("expressionSchema", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPartitionMethodStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPartitionMethodTupleSchemeFactory());
  }

  public String tableName; // required
  public String partitionType; // required
  public String expression; // required
  public TSchema expressionSchema; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_NAME((short)1, "tableName"),
    PARTITION_TYPE((short)2, "partitionType"),
    EXPRESSION((short)3, "expression"),
    EXPRESSION_SCHEMA((short)4, "expressionSchema");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_NAME
          return TABLE_NAME;
        case 2: // PARTITION_TYPE
          return PARTITION_TYPE;
        case 3: // EXPRESSION
          return EXPRESSION;
        case 4: // EXPRESSION_SCHEMA
          return EXPRESSION_SCHEMA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTITION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("partitionType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPRESSION, new org.apache.thrift.meta_data.FieldMetaData("expression", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPRESSION_SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("expressionSchema", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSchema.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPartitionMethod.class, metaDataMap);
  }

  public TPartitionMethod() {
  }

  public TPartitionMethod(
    String tableName,
    String partitionType,
    String expression,
    TSchema expressionSchema)
  {
    this();
    this.tableName = tableName;
    this.partitionType = partitionType;
    this.expression = expression;
    this.expressionSchema = expressionSchema;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPartitionMethod(TPartitionMethod other) {
    if (other.isSetTableName()) {
      this.tableName = other.tableName;
    }
    if (other.isSetPartitionType()) {
      this.partitionType = other.partitionType;
    }
    if (other.isSetExpression()) {
      this.expression = other.expression;
    }
    if (other.isSetExpressionSchema()) {
      this.expressionSchema = new TSchema(other.expressionSchema);
    }
  }

  public TPartitionMethod deepCopy() {
    return new TPartitionMethod(this);
  }

  @Override
  public void clear() {
    this.tableName = null;
    this.partitionType = null;
    this.expression = null;
    this.expressionSchema = null;
  }

  public String getTableName() {
    return this.tableName;
  }

  public TPartitionMethod setTableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  public void unsetTableName() {
    this.tableName = null;
  }

  /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
  public boolean isSetTableName() {
    return this.tableName != null;
  }

  public void setTableNameIsSet(boolean value) {
    if (!value) {
      this.tableName = null;
    }
  }

  public String getPartitionType() {
    return this.partitionType;
  }

  public TPartitionMethod setPartitionType(String partitionType) {
    this.partitionType = partitionType;
    return this;
  }

  public void unsetPartitionType() {
    this.partitionType = null;
  }

  /** Returns true if field partitionType is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitionType() {
    return this.partitionType != null;
  }

  public void setPartitionTypeIsSet(boolean value) {
    if (!value) {
      this.partitionType = null;
    }
  }

  public String getExpression() {
    return this.expression;
  }

  public TPartitionMethod setExpression(String expression) {
    this.expression = expression;
    return this;
  }

  public void unsetExpression() {
    this.expression = null;
  }

  /** Returns true if field expression is set (has been assigned a value) and false otherwise */
  public boolean isSetExpression() {
    return this.expression != null;
  }

  public void setExpressionIsSet(boolean value) {
    if (!value) {
      this.expression = null;
    }
  }

  public TSchema getExpressionSchema() {
    return this.expressionSchema;
  }

  public TPartitionMethod setExpressionSchema(TSchema expressionSchema) {
    this.expressionSchema = expressionSchema;
    return this;
  }

  public void unsetExpressionSchema() {
    this.expressionSchema = null;
  }

  /** Returns true if field expressionSchema is set (has been assigned a value) and false otherwise */
  public boolean isSetExpressionSchema() {
    return this.expressionSchema != null;
  }

  public void setExpressionSchemaIsSet(boolean value) {
    if (!value) {
      this.expressionSchema = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TABLE_NAME:
      if (value == null) {
        unsetTableName();
      } else {
        setTableName((String)value);
      }
      break;

    case PARTITION_TYPE:
      if (value == null) {
        unsetPartitionType();
      } else {
        setPartitionType((String)value);
      }
      break;

    case EXPRESSION:
      if (value == null) {
        unsetExpression();
      } else {
        setExpression((String)value);
      }
      break;

    case EXPRESSION_SCHEMA:
      if (value == null) {
        unsetExpressionSchema();
      } else {
        setExpressionSchema((TSchema)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_NAME:
      return getTableName();

    case PARTITION_TYPE:
      return getPartitionType();

    case EXPRESSION:
      return getExpression();

    case EXPRESSION_SCHEMA:
      return getExpressionSchema();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TABLE_NAME:
      return isSetTableName();
    case PARTITION_TYPE:
      return isSetPartitionType();
    case EXPRESSION:
      return isSetExpression();
    case EXPRESSION_SCHEMA:
      return isSetExpressionSchema();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPartitionMethod)
      return this.equals((TPartitionMethod)that);
    return false;
  }

  public boolean equals(TPartitionMethod that) {
    if (that == null)
      return false;

    boolean this_present_tableName = true && this.isSetTableName();
    boolean that_present_tableName = true && that.isSetTableName();
    if (this_present_tableName || that_present_tableName) {
      if (!(this_present_tableName && that_present_tableName))
        return false;
      if (!this.tableName.equals(that.tableName))
        return false;
    }

    boolean this_present_partitionType = true && this.isSetPartitionType();
    boolean that_present_partitionType = true && that.isSetPartitionType();
    if (this_present_partitionType || that_present_partitionType) {
      if (!(this_present_partitionType && that_present_partitionType))
        return false;
      if (!this.partitionType.equals(that.partitionType))
        return false;
    }

    boolean this_present_expression = true && this.isSetExpression();
    boolean that_present_expression = true && that.isSetExpression();
    if (this_present_expression || that_present_expression) {
      if (!(this_present_expression && that_present_expression))
        return false;
      if (!this.expression.equals(that.expression))
        return false;
    }

    boolean this_present_expressionSchema = true && this.isSetExpressionSchema();
    boolean that_present_expressionSchema = true && that.isSetExpressionSchema();
    if (this_present_expressionSchema || that_present_expressionSchema) {
      if (!(this_present_expressionSchema && that_present_expressionSchema))
        return false;
      if (!this.expressionSchema.equals(that.expressionSchema))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_tableName = true && (isSetTableName());
    list.add(present_tableName);
    if (present_tableName)
      list.add(tableName);

    boolean present_partitionType = true && (isSetPartitionType());
    list.add(present_partitionType);
    if (present_partitionType)
      list.add(partitionType);

    boolean present_expression = true && (isSetExpression());
    list.add(present_expression);
    if (present_expression)
      list.add(expression);

    boolean present_expressionSchema = true && (isSetExpressionSchema());
    list.add(present_expressionSchema);
    if (present_expressionSchema)
      list.add(expressionSchema);

    return list.hashCode();
  }

  @Override
  public int compareTo(TPartitionMethod other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartitionType()).compareTo(other.isSetPartitionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitionType, other.partitionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpression()).compareTo(other.isSetExpression());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpression()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expression, other.expression);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpressionSchema()).compareTo(other.isSetExpressionSchema());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpressionSchema()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expressionSchema, other.expressionSchema);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPartitionMethod(");
    boolean first = true;

    sb.append("tableName:");
    if (this.tableName == null) {
      sb.append("null");
    } else {
      sb.append(this.tableName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partitionType:");
    if (this.partitionType == null) {
      sb.append("null");
    } else {
      sb.append(this.partitionType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expression:");
    if (this.expression == null) {
      sb.append("null");
    } else {
      sb.append(this.expression);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expressionSchema:");
    if (this.expressionSchema == null) {
      sb.append("null");
    } else {
      sb.append(this.expressionSchema);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
    if (expressionSchema != null) {
      expressionSchema.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPartitionMethodStandardSchemeFactory implements SchemeFactory {
    public TPartitionMethodStandardScheme getScheme() {
      return new TPartitionMethodStandardScheme();
    }
  }

  private static class TPartitionMethodStandardScheme extends StandardScheme<TPartitionMethod> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPartitionMethod struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tableName = iprot.readString();
              struct.setTableNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARTITION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partitionType = iprot.readString();
              struct.setPartitionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXPRESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.expression = iprot.readString();
              struct.setExpressionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXPRESSION_SCHEMA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.expressionSchema = new TSchema();
              struct.expressionSchema.read(iprot);
              struct.setExpressionSchemaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPartitionMethod struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tableName != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(struct.tableName);
        oprot.writeFieldEnd();
      }
      if (struct.partitionType != null) {
        oprot.writeFieldBegin(PARTITION_TYPE_FIELD_DESC);
        oprot.writeString(struct.partitionType);
        oprot.writeFieldEnd();
      }
      if (struct.expression != null) {
        oprot.writeFieldBegin(EXPRESSION_FIELD_DESC);
        oprot.writeString(struct.expression);
        oprot.writeFieldEnd();
      }
      if (struct.expressionSchema != null) {
        oprot.writeFieldBegin(EXPRESSION_SCHEMA_FIELD_DESC);
        struct.expressionSchema.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPartitionMethodTupleSchemeFactory implements SchemeFactory {
    public TPartitionMethodTupleScheme getScheme() {
      return new TPartitionMethodTupleScheme();
    }
  }

  private static class TPartitionMethodTupleScheme extends TupleScheme<TPartitionMethod> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPartitionMethod struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTableName()) {
        optionals.set(0);
      }
      if (struct.isSetPartitionType()) {
        optionals.set(1);
      }
      if (struct.isSetExpression()) {
        optionals.set(2);
      }
      if (struct.isSetExpressionSchema()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetTableName()) {
        oprot.writeString(struct.tableName);
      }
      if (struct.isSetPartitionType()) {
        oprot.writeString(struct.partitionType);
      }
      if (struct.isSetExpression()) {
        oprot.writeString(struct.expression);
      }
      if (struct.isSetExpressionSchema()) {
        struct.expressionSchema.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPartitionMethod struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.tableName = iprot.readString();
        struct.setTableNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.partitionType = iprot.readString();
        struct.setPartitionTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.expression = iprot.readString();
        struct.setExpressionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.expressionSchema = new TSchema();
        struct.expressionSchema.read(iprot);
        struct.setExpressionSchemaIsSet(true);
      }
    }
  }

}

