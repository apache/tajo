/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.tajo.thrift.generated;


import java.util.Map;
import java.util.HashMap;
import org.apache.thrift.TEnum;

public enum TajoThriftDataType implements TEnum {
  NULL_TYPE(0),
  BOOLEAN(1),
  INT1(2),
  INT2(3),
  INT4(4),
  INT8(5),
  UINT1(6),
  UINT2(7),
  UINT4(8),
  UINT8(9),
  FLOAT4(10),
  FLOAT8(11),
  NUMERIC(12),
  CHAR(21),
  NCHAR(22),
  VARCHAR(23),
  NVARCHAR(24),
  TEXT(25),
  DATE(31),
  TIME(32),
  TIMEZ(33),
  TIMESTAMP(34),
  TIMESTAMPZ(35),
  INTERVAL(36),
  BIT(41),
  VARBIT(42),
  BINARY(43),
  VARBINARY(44),
  BLOB(45),
  ANY(51),
  UDT(52),
  PROTOBUF(53),
  INET4(91),
  INET6(92),
  BOOLEAN_ARRAY(101),
  INT1_ARRAY(102),
  INT2_ARRAY(103),
  INT4_ARRAY(104),
  INT8_ARRAY(105),
  UINT1_ARRAY(106),
  UINT2_ARRAY(107),
  UINT4_ARRAY(108),
  UINT8_ARRAY(109),
  FLOAT4_ARRAY(110),
  FLOAT8_ARRAY(111),
  NUMERIC_ARRAY(112),
  CHAR_ARRAY(121),
  NCHAR_ARRAY(122),
  VARCHAR_ARRAY(123),
  NVARCHAR_ARRAY(124),
  TEXT_ARRAY(125),
  DATE_ARRAY(131),
  TIME_ARRAY(132),
  TIMEZ_ARRAY(133),
  TIMESTAMP_ARRAY(134),
  TIMESTAMPZ_ARRAY(135),
  INTERVAL_ARRAY(136);

  private final int value;

  private TajoThriftDataType(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  public static TajoThriftDataType findByValue(int value) { 
    switch (value) {
      case 0:
        return NULL_TYPE;
      case 1:
        return BOOLEAN;
      case 2:
        return INT1;
      case 3:
        return INT2;
      case 4:
        return INT4;
      case 5:
        return INT8;
      case 6:
        return UINT1;
      case 7:
        return UINT2;
      case 8:
        return UINT4;
      case 9:
        return UINT8;
      case 10:
        return FLOAT4;
      case 11:
        return FLOAT8;
      case 12:
        return NUMERIC;
      case 21:
        return CHAR;
      case 22:
        return NCHAR;
      case 23:
        return VARCHAR;
      case 24:
        return NVARCHAR;
      case 25:
        return TEXT;
      case 31:
        return DATE;
      case 32:
        return TIME;
      case 33:
        return TIMEZ;
      case 34:
        return TIMESTAMP;
      case 35:
        return TIMESTAMPZ;
      case 36:
        return INTERVAL;
      case 41:
        return BIT;
      case 42:
        return VARBIT;
      case 43:
        return BINARY;
      case 44:
        return VARBINARY;
      case 45:
        return BLOB;
      case 51:
        return ANY;
      case 52:
        return UDT;
      case 53:
        return PROTOBUF;
      case 91:
        return INET4;
      case 92:
        return INET6;
      case 101:
        return BOOLEAN_ARRAY;
      case 102:
        return INT1_ARRAY;
      case 103:
        return INT2_ARRAY;
      case 104:
        return INT4_ARRAY;
      case 105:
        return INT8_ARRAY;
      case 106:
        return UINT1_ARRAY;
      case 107:
        return UINT2_ARRAY;
      case 108:
        return UINT4_ARRAY;
      case 109:
        return UINT8_ARRAY;
      case 110:
        return FLOAT4_ARRAY;
      case 111:
        return FLOAT8_ARRAY;
      case 112:
        return NUMERIC_ARRAY;
      case 121:
        return CHAR_ARRAY;
      case 122:
        return NCHAR_ARRAY;
      case 123:
        return VARCHAR_ARRAY;
      case 124:
        return NVARCHAR_ARRAY;
      case 125:
        return TEXT_ARRAY;
      case 131:
        return DATE_ARRAY;
      case 132:
        return TIME_ARRAY;
      case 133:
        return TIMEZ_ARRAY;
      case 134:
        return TIMESTAMP_ARRAY;
      case 135:
        return TIMESTAMPZ_ARRAY;
      case 136:
        return INTERVAL_ARRAY;
      default:
        return null;
    }
  }
}
