/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.tajo.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-12-20")
public class TColumn implements org.apache.thrift.TBase<TColumn, TColumn._Fields>, java.io.Serializable, Cloneable, Comparable<TColumn> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TColumn");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SIMPLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("simpleName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DATA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("dataType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DATA_TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dataTypeName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SQL_DATA_TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sqlDataTypeName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SQL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sqlType", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TColumnStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TColumnTupleSchemeFactory());
  }

  public String name; // required
  public String simpleName; // required
  /**
   * 
   * @see org.apache.tajo.thrift.generated.TajoThriftDataType
   */
  public TajoThriftDataType dataType; // required
  public String dataTypeName; // required
  public String sqlDataTypeName; // required
  public int sqlType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    SIMPLE_NAME((short)2, "simpleName"),
    /**
     * 
     * @see org.apache.tajo.thrift.generated.TajoThriftDataType
     */
    DATA_TYPE((short)3, "dataType"),
    DATA_TYPE_NAME((short)4, "dataTypeName"),
    SQL_DATA_TYPE_NAME((short)5, "sqlDataTypeName"),
    SQL_TYPE((short)6, "sqlType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // SIMPLE_NAME
          return SIMPLE_NAME;
        case 3: // DATA_TYPE
          return DATA_TYPE;
        case 4: // DATA_TYPE_NAME
          return DATA_TYPE_NAME;
        case 5: // SQL_DATA_TYPE_NAME
          return SQL_DATA_TYPE_NAME;
        case 6: // SQL_TYPE
          return SQL_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SQLTYPE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIMPLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("simpleName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("dataType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TajoThriftDataType.class)));
    tmpMap.put(_Fields.DATA_TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("dataTypeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SQL_DATA_TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("sqlDataTypeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SQL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sqlType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TColumn.class, metaDataMap);
  }

  public TColumn() {
  }

  public TColumn(
    String name,
    String simpleName,
    TajoThriftDataType dataType,
    String dataTypeName,
    String sqlDataTypeName,
    int sqlType)
  {
    this();
    this.name = name;
    this.simpleName = simpleName;
    this.dataType = dataType;
    this.dataTypeName = dataTypeName;
    this.sqlDataTypeName = sqlDataTypeName;
    this.sqlType = sqlType;
    setSqlTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TColumn(TColumn other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetSimpleName()) {
      this.simpleName = other.simpleName;
    }
    if (other.isSetDataType()) {
      this.dataType = other.dataType;
    }
    if (other.isSetDataTypeName()) {
      this.dataTypeName = other.dataTypeName;
    }
    if (other.isSetSqlDataTypeName()) {
      this.sqlDataTypeName = other.sqlDataTypeName;
    }
    this.sqlType = other.sqlType;
  }

  public TColumn deepCopy() {
    return new TColumn(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.simpleName = null;
    this.dataType = null;
    this.dataTypeName = null;
    this.sqlDataTypeName = null;
    setSqlTypeIsSet(false);
    this.sqlType = 0;
  }

  public String getName() {
    return this.name;
  }

  public TColumn setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getSimpleName() {
    return this.simpleName;
  }

  public TColumn setSimpleName(String simpleName) {
    this.simpleName = simpleName;
    return this;
  }

  public void unsetSimpleName() {
    this.simpleName = null;
  }

  /** Returns true if field simpleName is set (has been assigned a value) and false otherwise */
  public boolean isSetSimpleName() {
    return this.simpleName != null;
  }

  public void setSimpleNameIsSet(boolean value) {
    if (!value) {
      this.simpleName = null;
    }
  }

  /**
   * 
   * @see org.apache.tajo.thrift.generated.TajoThriftDataType
   */
  public TajoThriftDataType getDataType() {
    return this.dataType;
  }

  /**
   * 
   * @see org.apache.tajo.thrift.generated.TajoThriftDataType
   */
  public TColumn setDataType(TajoThriftDataType dataType) {
    this.dataType = dataType;
    return this;
  }

  public void unsetDataType() {
    this.dataType = null;
  }

  /** Returns true if field dataType is set (has been assigned a value) and false otherwise */
  public boolean isSetDataType() {
    return this.dataType != null;
  }

  public void setDataTypeIsSet(boolean value) {
    if (!value) {
      this.dataType = null;
    }
  }

  public String getDataTypeName() {
    return this.dataTypeName;
  }

  public TColumn setDataTypeName(String dataTypeName) {
    this.dataTypeName = dataTypeName;
    return this;
  }

  public void unsetDataTypeName() {
    this.dataTypeName = null;
  }

  /** Returns true if field dataTypeName is set (has been assigned a value) and false otherwise */
  public boolean isSetDataTypeName() {
    return this.dataTypeName != null;
  }

  public void setDataTypeNameIsSet(boolean value) {
    if (!value) {
      this.dataTypeName = null;
    }
  }

  public String getSqlDataTypeName() {
    return this.sqlDataTypeName;
  }

  public TColumn setSqlDataTypeName(String sqlDataTypeName) {
    this.sqlDataTypeName = sqlDataTypeName;
    return this;
  }

  public void unsetSqlDataTypeName() {
    this.sqlDataTypeName = null;
  }

  /** Returns true if field sqlDataTypeName is set (has been assigned a value) and false otherwise */
  public boolean isSetSqlDataTypeName() {
    return this.sqlDataTypeName != null;
  }

  public void setSqlDataTypeNameIsSet(boolean value) {
    if (!value) {
      this.sqlDataTypeName = null;
    }
  }

  public int getSqlType() {
    return this.sqlType;
  }

  public TColumn setSqlType(int sqlType) {
    this.sqlType = sqlType;
    setSqlTypeIsSet(true);
    return this;
  }

  public void unsetSqlType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SQLTYPE_ISSET_ID);
  }

  /** Returns true if field sqlType is set (has been assigned a value) and false otherwise */
  public boolean isSetSqlType() {
    return EncodingUtils.testBit(__isset_bitfield, __SQLTYPE_ISSET_ID);
  }

  public void setSqlTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SQLTYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SIMPLE_NAME:
      if (value == null) {
        unsetSimpleName();
      } else {
        setSimpleName((String)value);
      }
      break;

    case DATA_TYPE:
      if (value == null) {
        unsetDataType();
      } else {
        setDataType((TajoThriftDataType)value);
      }
      break;

    case DATA_TYPE_NAME:
      if (value == null) {
        unsetDataTypeName();
      } else {
        setDataTypeName((String)value);
      }
      break;

    case SQL_DATA_TYPE_NAME:
      if (value == null) {
        unsetSqlDataTypeName();
      } else {
        setSqlDataTypeName((String)value);
      }
      break;

    case SQL_TYPE:
      if (value == null) {
        unsetSqlType();
      } else {
        setSqlType((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case SIMPLE_NAME:
      return getSimpleName();

    case DATA_TYPE:
      return getDataType();

    case DATA_TYPE_NAME:
      return getDataTypeName();

    case SQL_DATA_TYPE_NAME:
      return getSqlDataTypeName();

    case SQL_TYPE:
      return Integer.valueOf(getSqlType());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case SIMPLE_NAME:
      return isSetSimpleName();
    case DATA_TYPE:
      return isSetDataType();
    case DATA_TYPE_NAME:
      return isSetDataTypeName();
    case SQL_DATA_TYPE_NAME:
      return isSetSqlDataTypeName();
    case SQL_TYPE:
      return isSetSqlType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TColumn)
      return this.equals((TColumn)that);
    return false;
  }

  public boolean equals(TColumn that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_simpleName = true && this.isSetSimpleName();
    boolean that_present_simpleName = true && that.isSetSimpleName();
    if (this_present_simpleName || that_present_simpleName) {
      if (!(this_present_simpleName && that_present_simpleName))
        return false;
      if (!this.simpleName.equals(that.simpleName))
        return false;
    }

    boolean this_present_dataType = true && this.isSetDataType();
    boolean that_present_dataType = true && that.isSetDataType();
    if (this_present_dataType || that_present_dataType) {
      if (!(this_present_dataType && that_present_dataType))
        return false;
      if (!this.dataType.equals(that.dataType))
        return false;
    }

    boolean this_present_dataTypeName = true && this.isSetDataTypeName();
    boolean that_present_dataTypeName = true && that.isSetDataTypeName();
    if (this_present_dataTypeName || that_present_dataTypeName) {
      if (!(this_present_dataTypeName && that_present_dataTypeName))
        return false;
      if (!this.dataTypeName.equals(that.dataTypeName))
        return false;
    }

    boolean this_present_sqlDataTypeName = true && this.isSetSqlDataTypeName();
    boolean that_present_sqlDataTypeName = true && that.isSetSqlDataTypeName();
    if (this_present_sqlDataTypeName || that_present_sqlDataTypeName) {
      if (!(this_present_sqlDataTypeName && that_present_sqlDataTypeName))
        return false;
      if (!this.sqlDataTypeName.equals(that.sqlDataTypeName))
        return false;
    }

    boolean this_present_sqlType = true;
    boolean that_present_sqlType = true;
    if (this_present_sqlType || that_present_sqlType) {
      if (!(this_present_sqlType && that_present_sqlType))
        return false;
      if (this.sqlType != that.sqlType)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_simpleName = true && (isSetSimpleName());
    list.add(present_simpleName);
    if (present_simpleName)
      list.add(simpleName);

    boolean present_dataType = true && (isSetDataType());
    list.add(present_dataType);
    if (present_dataType)
      list.add(dataType.getValue());

    boolean present_dataTypeName = true && (isSetDataTypeName());
    list.add(present_dataTypeName);
    if (present_dataTypeName)
      list.add(dataTypeName);

    boolean present_sqlDataTypeName = true && (isSetSqlDataTypeName());
    list.add(present_sqlDataTypeName);
    if (present_sqlDataTypeName)
      list.add(sqlDataTypeName);

    boolean present_sqlType = true;
    list.add(present_sqlType);
    if (present_sqlType)
      list.add(sqlType);

    return list.hashCode();
  }

  @Override
  public int compareTo(TColumn other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSimpleName()).compareTo(other.isSetSimpleName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSimpleName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simpleName, other.simpleName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataType()).compareTo(other.isSetDataType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataType, other.dataType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataTypeName()).compareTo(other.isSetDataTypeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataTypeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataTypeName, other.dataTypeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSqlDataTypeName()).compareTo(other.isSetSqlDataTypeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSqlDataTypeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlDataTypeName, other.sqlDataTypeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSqlType()).compareTo(other.isSetSqlType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSqlType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlType, other.sqlType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TColumn(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("simpleName:");
    if (this.simpleName == null) {
      sb.append("null");
    } else {
      sb.append(this.simpleName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataType:");
    if (this.dataType == null) {
      sb.append("null");
    } else {
      sb.append(this.dataType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataTypeName:");
    if (this.dataTypeName == null) {
      sb.append("null");
    } else {
      sb.append(this.dataTypeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sqlDataTypeName:");
    if (this.sqlDataTypeName == null) {
      sb.append("null");
    } else {
      sb.append(this.sqlDataTypeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sqlType:");
    sb.append(this.sqlType);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TColumnStandardSchemeFactory implements SchemeFactory {
    public TColumnStandardScheme getScheme() {
      return new TColumnStandardScheme();
    }
  }

  private static class TColumnStandardScheme extends StandardScheme<TColumn> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TColumn struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SIMPLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.simpleName = iprot.readString();
              struct.setSimpleNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATA_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dataType = TajoThriftDataType.findByValue(iprot.readI32());
              struct.setDataTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATA_TYPE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dataTypeName = iprot.readString();
              struct.setDataTypeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SQL_DATA_TYPE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sqlDataTypeName = iprot.readString();
              struct.setSqlDataTypeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SQL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sqlType = iprot.readI32();
              struct.setSqlTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TColumn struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.simpleName != null) {
        oprot.writeFieldBegin(SIMPLE_NAME_FIELD_DESC);
        oprot.writeString(struct.simpleName);
        oprot.writeFieldEnd();
      }
      if (struct.dataType != null) {
        oprot.writeFieldBegin(DATA_TYPE_FIELD_DESC);
        oprot.writeI32(struct.dataType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.dataTypeName != null) {
        oprot.writeFieldBegin(DATA_TYPE_NAME_FIELD_DESC);
        oprot.writeString(struct.dataTypeName);
        oprot.writeFieldEnd();
      }
      if (struct.sqlDataTypeName != null) {
        oprot.writeFieldBegin(SQL_DATA_TYPE_NAME_FIELD_DESC);
        oprot.writeString(struct.sqlDataTypeName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SQL_TYPE_FIELD_DESC);
      oprot.writeI32(struct.sqlType);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TColumnTupleSchemeFactory implements SchemeFactory {
    public TColumnTupleScheme getScheme() {
      return new TColumnTupleScheme();
    }
  }

  private static class TColumnTupleScheme extends TupleScheme<TColumn> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TColumn struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetSimpleName()) {
        optionals.set(1);
      }
      if (struct.isSetDataType()) {
        optionals.set(2);
      }
      if (struct.isSetDataTypeName()) {
        optionals.set(3);
      }
      if (struct.isSetSqlDataTypeName()) {
        optionals.set(4);
      }
      if (struct.isSetSqlType()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetSimpleName()) {
        oprot.writeString(struct.simpleName);
      }
      if (struct.isSetDataType()) {
        oprot.writeI32(struct.dataType.getValue());
      }
      if (struct.isSetDataTypeName()) {
        oprot.writeString(struct.dataTypeName);
      }
      if (struct.isSetSqlDataTypeName()) {
        oprot.writeString(struct.sqlDataTypeName);
      }
      if (struct.isSetSqlType()) {
        oprot.writeI32(struct.sqlType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TColumn struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.simpleName = iprot.readString();
        struct.setSimpleNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.dataType = TajoThriftDataType.findByValue(iprot.readI32());
        struct.setDataTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.dataTypeName = iprot.readString();
        struct.setDataTypeNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sqlDataTypeName = iprot.readString();
        struct.setSqlDataTypeNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sqlType = iprot.readI32();
        struct.setSqlTypeIsSet(true);
      }
    }
  }

}

