/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.tajo.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-12-18")
public class TTableDesc implements org.apache.thrift.TBase<TTableDesc, TTableDesc._Fields>, java.io.Serializable, Cloneable, Comparable<TTableDesc> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTableDesc");

  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STORE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("storeType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TABLE_META_FIELD_DESC = new org.apache.thrift.protocol.TField("tableMeta", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("schema", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("stats", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField PARTITION_FIELD_DESC = new org.apache.thrift.protocol.TField("partition", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField IS_EXTERNAL_FIELD_DESC = new org.apache.thrift.protocol.TField("isExternal", org.apache.thrift.protocol.TType.BOOL, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TTableDescStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTableDescTupleSchemeFactory());
  }

  public String tableName; // required
  public String path; // required
  public String storeType; // required
  public Map<String,String> tableMeta; // required
  public TSchema schema; // required
  public TTableStats stats; // required
  public TPartitionMethod partition; // required
  public boolean isExternal; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_NAME((short)1, "tableName"),
    PATH((short)2, "path"),
    STORE_TYPE((short)3, "storeType"),
    TABLE_META((short)4, "tableMeta"),
    SCHEMA((short)5, "schema"),
    STATS((short)6, "stats"),
    PARTITION((short)7, "partition"),
    IS_EXTERNAL((short)8, "isExternal");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_NAME
          return TABLE_NAME;
        case 2: // PATH
          return PATH;
        case 3: // STORE_TYPE
          return STORE_TYPE;
        case 4: // TABLE_META
          return TABLE_META;
        case 5: // SCHEMA
          return SCHEMA;
        case 6: // STATS
          return STATS;
        case 7: // PARTITION
          return PARTITION;
        case 8: // IS_EXTERNAL
          return IS_EXTERNAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISEXTERNAL_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STORE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("storeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_META, new org.apache.thrift.meta_data.FieldMetaData("tableMeta", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("schema", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSchema.class)));
    tmpMap.put(_Fields.STATS, new org.apache.thrift.meta_data.FieldMetaData("stats", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTableStats.class)));
    tmpMap.put(_Fields.PARTITION, new org.apache.thrift.meta_data.FieldMetaData("partition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPartitionMethod.class)));
    tmpMap.put(_Fields.IS_EXTERNAL, new org.apache.thrift.meta_data.FieldMetaData("isExternal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTableDesc.class, metaDataMap);
  }

  public TTableDesc() {
  }

  public TTableDesc(
    String tableName,
    String path,
    String storeType,
    Map<String,String> tableMeta,
    TSchema schema,
    TTableStats stats,
    TPartitionMethod partition,
    boolean isExternal)
  {
    this();
    this.tableName = tableName;
    this.path = path;
    this.storeType = storeType;
    this.tableMeta = tableMeta;
    this.schema = schema;
    this.stats = stats;
    this.partition = partition;
    this.isExternal = isExternal;
    setIsExternalIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTableDesc(TTableDesc other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTableName()) {
      this.tableName = other.tableName;
    }
    if (other.isSetPath()) {
      this.path = other.path;
    }
    if (other.isSetStoreType()) {
      this.storeType = other.storeType;
    }
    if (other.isSetTableMeta()) {
      Map<String,String> __this__tableMeta = new HashMap<String,String>(other.tableMeta);
      this.tableMeta = __this__tableMeta;
    }
    if (other.isSetSchema()) {
      this.schema = new TSchema(other.schema);
    }
    if (other.isSetStats()) {
      this.stats = new TTableStats(other.stats);
    }
    if (other.isSetPartition()) {
      this.partition = new TPartitionMethod(other.partition);
    }
    this.isExternal = other.isExternal;
  }

  public TTableDesc deepCopy() {
    return new TTableDesc(this);
  }

  @Override
  public void clear() {
    this.tableName = null;
    this.path = null;
    this.storeType = null;
    this.tableMeta = null;
    this.schema = null;
    this.stats = null;
    this.partition = null;
    setIsExternalIsSet(false);
    this.isExternal = false;
  }

  public String getTableName() {
    return this.tableName;
  }

  public TTableDesc setTableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  public void unsetTableName() {
    this.tableName = null;
  }

  /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
  public boolean isSetTableName() {
    return this.tableName != null;
  }

  public void setTableNameIsSet(boolean value) {
    if (!value) {
      this.tableName = null;
    }
  }

  public String getPath() {
    return this.path;
  }

  public TTableDesc setPath(String path) {
    this.path = path;
    return this;
  }

  public void unsetPath() {
    this.path = null;
  }

  /** Returns true if field path is set (has been assigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  public String getStoreType() {
    return this.storeType;
  }

  public TTableDesc setStoreType(String storeType) {
    this.storeType = storeType;
    return this;
  }

  public void unsetStoreType() {
    this.storeType = null;
  }

  /** Returns true if field storeType is set (has been assigned a value) and false otherwise */
  public boolean isSetStoreType() {
    return this.storeType != null;
  }

  public void setStoreTypeIsSet(boolean value) {
    if (!value) {
      this.storeType = null;
    }
  }

  public int getTableMetaSize() {
    return (this.tableMeta == null) ? 0 : this.tableMeta.size();
  }

  public void putToTableMeta(String key, String val) {
    if (this.tableMeta == null) {
      this.tableMeta = new HashMap<String,String>();
    }
    this.tableMeta.put(key, val);
  }

  public Map<String,String> getTableMeta() {
    return this.tableMeta;
  }

  public TTableDesc setTableMeta(Map<String,String> tableMeta) {
    this.tableMeta = tableMeta;
    return this;
  }

  public void unsetTableMeta() {
    this.tableMeta = null;
  }

  /** Returns true if field tableMeta is set (has been assigned a value) and false otherwise */
  public boolean isSetTableMeta() {
    return this.tableMeta != null;
  }

  public void setTableMetaIsSet(boolean value) {
    if (!value) {
      this.tableMeta = null;
    }
  }

  public TSchema getSchema() {
    return this.schema;
  }

  public TTableDesc setSchema(TSchema schema) {
    this.schema = schema;
    return this;
  }

  public void unsetSchema() {
    this.schema = null;
  }

  /** Returns true if field schema is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema() {
    return this.schema != null;
  }

  public void setSchemaIsSet(boolean value) {
    if (!value) {
      this.schema = null;
    }
  }

  public TTableStats getStats() {
    return this.stats;
  }

  public TTableDesc setStats(TTableStats stats) {
    this.stats = stats;
    return this;
  }

  public void unsetStats() {
    this.stats = null;
  }

  /** Returns true if field stats is set (has been assigned a value) and false otherwise */
  public boolean isSetStats() {
    return this.stats != null;
  }

  public void setStatsIsSet(boolean value) {
    if (!value) {
      this.stats = null;
    }
  }

  public TPartitionMethod getPartition() {
    return this.partition;
  }

  public TTableDesc setPartition(TPartitionMethod partition) {
    this.partition = partition;
    return this;
  }

  public void unsetPartition() {
    this.partition = null;
  }

  /** Returns true if field partition is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition() {
    return this.partition != null;
  }

  public void setPartitionIsSet(boolean value) {
    if (!value) {
      this.partition = null;
    }
  }

  public boolean isIsExternal() {
    return this.isExternal;
  }

  public TTableDesc setIsExternal(boolean isExternal) {
    this.isExternal = isExternal;
    setIsExternalIsSet(true);
    return this;
  }

  public void unsetIsExternal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISEXTERNAL_ISSET_ID);
  }

  /** Returns true if field isExternal is set (has been assigned a value) and false otherwise */
  public boolean isSetIsExternal() {
    return EncodingUtils.testBit(__isset_bitfield, __ISEXTERNAL_ISSET_ID);
  }

  public void setIsExternalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISEXTERNAL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TABLE_NAME:
      if (value == null) {
        unsetTableName();
      } else {
        setTableName((String)value);
      }
      break;

    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((String)value);
      }
      break;

    case STORE_TYPE:
      if (value == null) {
        unsetStoreType();
      } else {
        setStoreType((String)value);
      }
      break;

    case TABLE_META:
      if (value == null) {
        unsetTableMeta();
      } else {
        setTableMeta((Map<String,String>)value);
      }
      break;

    case SCHEMA:
      if (value == null) {
        unsetSchema();
      } else {
        setSchema((TSchema)value);
      }
      break;

    case STATS:
      if (value == null) {
        unsetStats();
      } else {
        setStats((TTableStats)value);
      }
      break;

    case PARTITION:
      if (value == null) {
        unsetPartition();
      } else {
        setPartition((TPartitionMethod)value);
      }
      break;

    case IS_EXTERNAL:
      if (value == null) {
        unsetIsExternal();
      } else {
        setIsExternal((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_NAME:
      return getTableName();

    case PATH:
      return getPath();

    case STORE_TYPE:
      return getStoreType();

    case TABLE_META:
      return getTableMeta();

    case SCHEMA:
      return getSchema();

    case STATS:
      return getStats();

    case PARTITION:
      return getPartition();

    case IS_EXTERNAL:
      return Boolean.valueOf(isIsExternal());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TABLE_NAME:
      return isSetTableName();
    case PATH:
      return isSetPath();
    case STORE_TYPE:
      return isSetStoreType();
    case TABLE_META:
      return isSetTableMeta();
    case SCHEMA:
      return isSetSchema();
    case STATS:
      return isSetStats();
    case PARTITION:
      return isSetPartition();
    case IS_EXTERNAL:
      return isSetIsExternal();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTableDesc)
      return this.equals((TTableDesc)that);
    return false;
  }

  public boolean equals(TTableDesc that) {
    if (that == null)
      return false;

    boolean this_present_tableName = true && this.isSetTableName();
    boolean that_present_tableName = true && that.isSetTableName();
    if (this_present_tableName || that_present_tableName) {
      if (!(this_present_tableName && that_present_tableName))
        return false;
      if (!this.tableName.equals(that.tableName))
        return false;
    }

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }

    boolean this_present_storeType = true && this.isSetStoreType();
    boolean that_present_storeType = true && that.isSetStoreType();
    if (this_present_storeType || that_present_storeType) {
      if (!(this_present_storeType && that_present_storeType))
        return false;
      if (!this.storeType.equals(that.storeType))
        return false;
    }

    boolean this_present_tableMeta = true && this.isSetTableMeta();
    boolean that_present_tableMeta = true && that.isSetTableMeta();
    if (this_present_tableMeta || that_present_tableMeta) {
      if (!(this_present_tableMeta && that_present_tableMeta))
        return false;
      if (!this.tableMeta.equals(that.tableMeta))
        return false;
    }

    boolean this_present_schema = true && this.isSetSchema();
    boolean that_present_schema = true && that.isSetSchema();
    if (this_present_schema || that_present_schema) {
      if (!(this_present_schema && that_present_schema))
        return false;
      if (!this.schema.equals(that.schema))
        return false;
    }

    boolean this_present_stats = true && this.isSetStats();
    boolean that_present_stats = true && that.isSetStats();
    if (this_present_stats || that_present_stats) {
      if (!(this_present_stats && that_present_stats))
        return false;
      if (!this.stats.equals(that.stats))
        return false;
    }

    boolean this_present_partition = true && this.isSetPartition();
    boolean that_present_partition = true && that.isSetPartition();
    if (this_present_partition || that_present_partition) {
      if (!(this_present_partition && that_present_partition))
        return false;
      if (!this.partition.equals(that.partition))
        return false;
    }

    boolean this_present_isExternal = true;
    boolean that_present_isExternal = true;
    if (this_present_isExternal || that_present_isExternal) {
      if (!(this_present_isExternal && that_present_isExternal))
        return false;
      if (this.isExternal != that.isExternal)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_tableName = true && (isSetTableName());
    list.add(present_tableName);
    if (present_tableName)
      list.add(tableName);

    boolean present_path = true && (isSetPath());
    list.add(present_path);
    if (present_path)
      list.add(path);

    boolean present_storeType = true && (isSetStoreType());
    list.add(present_storeType);
    if (present_storeType)
      list.add(storeType);

    boolean present_tableMeta = true && (isSetTableMeta());
    list.add(present_tableMeta);
    if (present_tableMeta)
      list.add(tableMeta);

    boolean present_schema = true && (isSetSchema());
    list.add(present_schema);
    if (present_schema)
      list.add(schema);

    boolean present_stats = true && (isSetStats());
    list.add(present_stats);
    if (present_stats)
      list.add(stats);

    boolean present_partition = true && (isSetPartition());
    list.add(present_partition);
    if (present_partition)
      list.add(partition);

    boolean present_isExternal = true;
    list.add(present_isExternal);
    if (present_isExternal)
      list.add(isExternal);

    return list.hashCode();
  }

  @Override
  public int compareTo(TTableDesc other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStoreType()).compareTo(other.isSetStoreType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStoreType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storeType, other.storeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTableMeta()).compareTo(other.isSetTableMeta());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableMeta()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableMeta, other.tableMeta);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchema()).compareTo(other.isSetSchema());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema, other.schema);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStats()).compareTo(other.isSetStats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stats, other.stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartition()).compareTo(other.isSetPartition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition, other.partition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsExternal()).compareTo(other.isSetIsExternal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsExternal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isExternal, other.isExternal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTableDesc(");
    boolean first = true;

    sb.append("tableName:");
    if (this.tableName == null) {
      sb.append("null");
    } else {
      sb.append(this.tableName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("path:");
    if (this.path == null) {
      sb.append("null");
    } else {
      sb.append(this.path);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("storeType:");
    if (this.storeType == null) {
      sb.append("null");
    } else {
      sb.append(this.storeType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tableMeta:");
    if (this.tableMeta == null) {
      sb.append("null");
    } else {
      sb.append(this.tableMeta);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("schema:");
    if (this.schema == null) {
      sb.append("null");
    } else {
      sb.append(this.schema);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stats:");
    if (this.stats == null) {
      sb.append("null");
    } else {
      sb.append(this.stats);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partition:");
    if (this.partition == null) {
      sb.append("null");
    } else {
      sb.append(this.partition);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isExternal:");
    sb.append(this.isExternal);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
    if (schema != null) {
      schema.validate();
    }
    if (stats != null) {
      stats.validate();
    }
    if (partition != null) {
      partition.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTableDescStandardSchemeFactory implements SchemeFactory {
    public TTableDescStandardScheme getScheme() {
      return new TTableDescStandardScheme();
    }
  }

  private static class TTableDescStandardScheme extends StandardScheme<TTableDesc> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTableDesc struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tableName = iprot.readString();
              struct.setTableNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.path = iprot.readString();
              struct.setPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STORE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.storeType = iprot.readString();
              struct.setStoreTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TABLE_META
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.tableMeta = new HashMap<String,String>(2*_map8.size);
                String _key9;
                String _val10;
                for (int _i11 = 0; _i11 < _map8.size; ++_i11)
                {
                  _key9 = iprot.readString();
                  _val10 = iprot.readString();
                  struct.tableMeta.put(_key9, _val10);
                }
                iprot.readMapEnd();
              }
              struct.setTableMetaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SCHEMA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.schema = new TSchema();
              struct.schema.read(iprot);
              struct.setSchemaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.stats = new TTableStats();
              struct.stats.read(iprot);
              struct.setStatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PARTITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.partition = new TPartitionMethod();
              struct.partition.read(iprot);
              struct.setPartitionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_EXTERNAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isExternal = iprot.readBool();
              struct.setIsExternalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTableDesc struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tableName != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(struct.tableName);
        oprot.writeFieldEnd();
      }
      if (struct.path != null) {
        oprot.writeFieldBegin(PATH_FIELD_DESC);
        oprot.writeString(struct.path);
        oprot.writeFieldEnd();
      }
      if (struct.storeType != null) {
        oprot.writeFieldBegin(STORE_TYPE_FIELD_DESC);
        oprot.writeString(struct.storeType);
        oprot.writeFieldEnd();
      }
      if (struct.tableMeta != null) {
        oprot.writeFieldBegin(TABLE_META_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.tableMeta.size()));
          for (Map.Entry<String, String> _iter12 : struct.tableMeta.entrySet())
          {
            oprot.writeString(_iter12.getKey());
            oprot.writeString(_iter12.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.schema != null) {
        oprot.writeFieldBegin(SCHEMA_FIELD_DESC);
        struct.schema.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.stats != null) {
        oprot.writeFieldBegin(STATS_FIELD_DESC);
        struct.stats.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.partition != null) {
        oprot.writeFieldBegin(PARTITION_FIELD_DESC);
        struct.partition.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_EXTERNAL_FIELD_DESC);
      oprot.writeBool(struct.isExternal);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTableDescTupleSchemeFactory implements SchemeFactory {
    public TTableDescTupleScheme getScheme() {
      return new TTableDescTupleScheme();
    }
  }

  private static class TTableDescTupleScheme extends TupleScheme<TTableDesc> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTableDesc struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTableName()) {
        optionals.set(0);
      }
      if (struct.isSetPath()) {
        optionals.set(1);
      }
      if (struct.isSetStoreType()) {
        optionals.set(2);
      }
      if (struct.isSetTableMeta()) {
        optionals.set(3);
      }
      if (struct.isSetSchema()) {
        optionals.set(4);
      }
      if (struct.isSetStats()) {
        optionals.set(5);
      }
      if (struct.isSetPartition()) {
        optionals.set(6);
      }
      if (struct.isSetIsExternal()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetTableName()) {
        oprot.writeString(struct.tableName);
      }
      if (struct.isSetPath()) {
        oprot.writeString(struct.path);
      }
      if (struct.isSetStoreType()) {
        oprot.writeString(struct.storeType);
      }
      if (struct.isSetTableMeta()) {
        {
          oprot.writeI32(struct.tableMeta.size());
          for (Map.Entry<String, String> _iter13 : struct.tableMeta.entrySet())
          {
            oprot.writeString(_iter13.getKey());
            oprot.writeString(_iter13.getValue());
          }
        }
      }
      if (struct.isSetSchema()) {
        struct.schema.write(oprot);
      }
      if (struct.isSetStats()) {
        struct.stats.write(oprot);
      }
      if (struct.isSetPartition()) {
        struct.partition.write(oprot);
      }
      if (struct.isSetIsExternal()) {
        oprot.writeBool(struct.isExternal);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTableDesc struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.tableName = iprot.readString();
        struct.setTableNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.path = iprot.readString();
        struct.setPathIsSet(true);
      }
      if (incoming.get(2)) {
        struct.storeType = iprot.readString();
        struct.setStoreTypeIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.tableMeta = new HashMap<String,String>(2*_map14.size);
          String _key15;
          String _val16;
          for (int _i17 = 0; _i17 < _map14.size; ++_i17)
          {
            _key15 = iprot.readString();
            _val16 = iprot.readString();
            struct.tableMeta.put(_key15, _val16);
          }
        }
        struct.setTableMetaIsSet(true);
      }
      if (incoming.get(4)) {
        struct.schema = new TSchema();
        struct.schema.read(iprot);
        struct.setSchemaIsSet(true);
      }
      if (incoming.get(5)) {
        struct.stats = new TTableStats();
        struct.stats.read(iprot);
        struct.setStatsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.partition = new TPartitionMethod();
        struct.partition.read(iprot);
        struct.setPartitionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isExternal = iprot.readBool();
        struct.setIsExternalIsSet(true);
      }
    }
  }

}

