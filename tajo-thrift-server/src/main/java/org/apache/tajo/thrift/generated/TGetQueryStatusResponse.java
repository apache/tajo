/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.tajo.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-12-20")
public class TGetQueryStatusResponse implements org.apache.thrift.TBase<TGetQueryStatusResponse, TGetQueryStatusResponse._Fields>, java.io.Serializable, Cloneable, Comparable<TGetQueryStatusResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TGetQueryStatusResponse");

  private static final org.apache.thrift.protocol.TField RESULT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("resultCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField QUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("queryId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PROGRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("progress", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField SUBMIT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("submitTime", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField FINISH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("finishTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField HAS_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("hasResult", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField ERROR_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorMessage", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ERROR_TRACE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorTrace", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField QUERY_MASTER_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("queryMasterHost", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField QUERY_MASTER_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("queryMasterPort", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField QUERY_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("queryResult", org.apache.thrift.protocol.TType.STRUCT, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TGetQueryStatusResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TGetQueryStatusResponseTupleSchemeFactory());
  }

  public String resultCode; // required
  public String queryId; // required
  public String state; // required
  public double progress; // required
  public long submitTime; // required
  public long finishTime; // required
  public boolean hasResult; // required
  public String errorMessage; // required
  public String errorTrace; // required
  public String queryMasterHost; // required
  public int queryMasterPort; // required
  public TQueryResult queryResult; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESULT_CODE((short)1, "resultCode"),
    QUERY_ID((short)2, "queryId"),
    STATE((short)3, "state"),
    PROGRESS((short)4, "progress"),
    SUBMIT_TIME((short)5, "submitTime"),
    FINISH_TIME((short)6, "finishTime"),
    HAS_RESULT((short)7, "hasResult"),
    ERROR_MESSAGE((short)8, "errorMessage"),
    ERROR_TRACE((short)9, "errorTrace"),
    QUERY_MASTER_HOST((short)10, "queryMasterHost"),
    QUERY_MASTER_PORT((short)11, "queryMasterPort"),
    QUERY_RESULT((short)12, "queryResult");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESULT_CODE
          return RESULT_CODE;
        case 2: // QUERY_ID
          return QUERY_ID;
        case 3: // STATE
          return STATE;
        case 4: // PROGRESS
          return PROGRESS;
        case 5: // SUBMIT_TIME
          return SUBMIT_TIME;
        case 6: // FINISH_TIME
          return FINISH_TIME;
        case 7: // HAS_RESULT
          return HAS_RESULT;
        case 8: // ERROR_MESSAGE
          return ERROR_MESSAGE;
        case 9: // ERROR_TRACE
          return ERROR_TRACE;
        case 10: // QUERY_MASTER_HOST
          return QUERY_MASTER_HOST;
        case 11: // QUERY_MASTER_PORT
          return QUERY_MASTER_PORT;
        case 12: // QUERY_RESULT
          return QUERY_RESULT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROGRESS_ISSET_ID = 0;
  private static final int __SUBMITTIME_ISSET_ID = 1;
  private static final int __FINISHTIME_ISSET_ID = 2;
  private static final int __HASRESULT_ISSET_ID = 3;
  private static final int __QUERYMASTERPORT_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESULT_CODE, new org.apache.thrift.meta_data.FieldMetaData("resultCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUERY_ID, new org.apache.thrift.meta_data.FieldMetaData("queryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROGRESS, new org.apache.thrift.meta_data.FieldMetaData("progress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SUBMIT_TIME, new org.apache.thrift.meta_data.FieldMetaData("submitTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FINISH_TIME, new org.apache.thrift.meta_data.FieldMetaData("finishTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HAS_RESULT, new org.apache.thrift.meta_data.FieldMetaData("hasResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ERROR_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("errorMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ERROR_TRACE, new org.apache.thrift.meta_data.FieldMetaData("errorTrace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUERY_MASTER_HOST, new org.apache.thrift.meta_data.FieldMetaData("queryMasterHost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUERY_MASTER_PORT, new org.apache.thrift.meta_data.FieldMetaData("queryMasterPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUERY_RESULT, new org.apache.thrift.meta_data.FieldMetaData("queryResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQueryResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TGetQueryStatusResponse.class, metaDataMap);
  }

  public TGetQueryStatusResponse() {
  }

  public TGetQueryStatusResponse(
    String resultCode,
    String queryId,
    String state,
    double progress,
    long submitTime,
    long finishTime,
    boolean hasResult,
    String errorMessage,
    String errorTrace,
    String queryMasterHost,
    int queryMasterPort,
    TQueryResult queryResult)
  {
    this();
    this.resultCode = resultCode;
    this.queryId = queryId;
    this.state = state;
    this.progress = progress;
    setProgressIsSet(true);
    this.submitTime = submitTime;
    setSubmitTimeIsSet(true);
    this.finishTime = finishTime;
    setFinishTimeIsSet(true);
    this.hasResult = hasResult;
    setHasResultIsSet(true);
    this.errorMessage = errorMessage;
    this.errorTrace = errorTrace;
    this.queryMasterHost = queryMasterHost;
    this.queryMasterPort = queryMasterPort;
    setQueryMasterPortIsSet(true);
    this.queryResult = queryResult;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TGetQueryStatusResponse(TGetQueryStatusResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetResultCode()) {
      this.resultCode = other.resultCode;
    }
    if (other.isSetQueryId()) {
      this.queryId = other.queryId;
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
    this.progress = other.progress;
    this.submitTime = other.submitTime;
    this.finishTime = other.finishTime;
    this.hasResult = other.hasResult;
    if (other.isSetErrorMessage()) {
      this.errorMessage = other.errorMessage;
    }
    if (other.isSetErrorTrace()) {
      this.errorTrace = other.errorTrace;
    }
    if (other.isSetQueryMasterHost()) {
      this.queryMasterHost = other.queryMasterHost;
    }
    this.queryMasterPort = other.queryMasterPort;
    if (other.isSetQueryResult()) {
      this.queryResult = new TQueryResult(other.queryResult);
    }
  }

  public TGetQueryStatusResponse deepCopy() {
    return new TGetQueryStatusResponse(this);
  }

  @Override
  public void clear() {
    this.resultCode = null;
    this.queryId = null;
    this.state = null;
    setProgressIsSet(false);
    this.progress = 0.0;
    setSubmitTimeIsSet(false);
    this.submitTime = 0;
    setFinishTimeIsSet(false);
    this.finishTime = 0;
    setHasResultIsSet(false);
    this.hasResult = false;
    this.errorMessage = null;
    this.errorTrace = null;
    this.queryMasterHost = null;
    setQueryMasterPortIsSet(false);
    this.queryMasterPort = 0;
    this.queryResult = null;
  }

  public String getResultCode() {
    return this.resultCode;
  }

  public TGetQueryStatusResponse setResultCode(String resultCode) {
    this.resultCode = resultCode;
    return this;
  }

  public void unsetResultCode() {
    this.resultCode = null;
  }

  /** Returns true if field resultCode is set (has been assigned a value) and false otherwise */
  public boolean isSetResultCode() {
    return this.resultCode != null;
  }

  public void setResultCodeIsSet(boolean value) {
    if (!value) {
      this.resultCode = null;
    }
  }

  public String getQueryId() {
    return this.queryId;
  }

  public TGetQueryStatusResponse setQueryId(String queryId) {
    this.queryId = queryId;
    return this;
  }

  public void unsetQueryId() {
    this.queryId = null;
  }

  /** Returns true if field queryId is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryId() {
    return this.queryId != null;
  }

  public void setQueryIdIsSet(boolean value) {
    if (!value) {
      this.queryId = null;
    }
  }

  public String getState() {
    return this.state;
  }

  public TGetQueryStatusResponse setState(String state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public double getProgress() {
    return this.progress;
  }

  public TGetQueryStatusResponse setProgress(double progress) {
    this.progress = progress;
    setProgressIsSet(true);
    return this;
  }

  public void unsetProgress() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROGRESS_ISSET_ID);
  }

  /** Returns true if field progress is set (has been assigned a value) and false otherwise */
  public boolean isSetProgress() {
    return EncodingUtils.testBit(__isset_bitfield, __PROGRESS_ISSET_ID);
  }

  public void setProgressIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROGRESS_ISSET_ID, value);
  }

  public long getSubmitTime() {
    return this.submitTime;
  }

  public TGetQueryStatusResponse setSubmitTime(long submitTime) {
    this.submitTime = submitTime;
    setSubmitTimeIsSet(true);
    return this;
  }

  public void unsetSubmitTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBMITTIME_ISSET_ID);
  }

  /** Returns true if field submitTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSubmitTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBMITTIME_ISSET_ID);
  }

  public void setSubmitTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBMITTIME_ISSET_ID, value);
  }

  public long getFinishTime() {
    return this.finishTime;
  }

  public TGetQueryStatusResponse setFinishTime(long finishTime) {
    this.finishTime = finishTime;
    setFinishTimeIsSet(true);
    return this;
  }

  public void unsetFinishTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINISHTIME_ISSET_ID);
  }

  /** Returns true if field finishTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFinishTime() {
    return EncodingUtils.testBit(__isset_bitfield, __FINISHTIME_ISSET_ID);
  }

  public void setFinishTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINISHTIME_ISSET_ID, value);
  }

  public boolean isHasResult() {
    return this.hasResult;
  }

  public TGetQueryStatusResponse setHasResult(boolean hasResult) {
    this.hasResult = hasResult;
    setHasResultIsSet(true);
    return this;
  }

  public void unsetHasResult() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASRESULT_ISSET_ID);
  }

  /** Returns true if field hasResult is set (has been assigned a value) and false otherwise */
  public boolean isSetHasResult() {
    return EncodingUtils.testBit(__isset_bitfield, __HASRESULT_ISSET_ID);
  }

  public void setHasResultIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASRESULT_ISSET_ID, value);
  }

  public String getErrorMessage() {
    return this.errorMessage;
  }

  public TGetQueryStatusResponse setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  public void unsetErrorMessage() {
    this.errorMessage = null;
  }

  /** Returns true if field errorMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorMessage() {
    return this.errorMessage != null;
  }

  public void setErrorMessageIsSet(boolean value) {
    if (!value) {
      this.errorMessage = null;
    }
  }

  public String getErrorTrace() {
    return this.errorTrace;
  }

  public TGetQueryStatusResponse setErrorTrace(String errorTrace) {
    this.errorTrace = errorTrace;
    return this;
  }

  public void unsetErrorTrace() {
    this.errorTrace = null;
  }

  /** Returns true if field errorTrace is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorTrace() {
    return this.errorTrace != null;
  }

  public void setErrorTraceIsSet(boolean value) {
    if (!value) {
      this.errorTrace = null;
    }
  }

  public String getQueryMasterHost() {
    return this.queryMasterHost;
  }

  public TGetQueryStatusResponse setQueryMasterHost(String queryMasterHost) {
    this.queryMasterHost = queryMasterHost;
    return this;
  }

  public void unsetQueryMasterHost() {
    this.queryMasterHost = null;
  }

  /** Returns true if field queryMasterHost is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryMasterHost() {
    return this.queryMasterHost != null;
  }

  public void setQueryMasterHostIsSet(boolean value) {
    if (!value) {
      this.queryMasterHost = null;
    }
  }

  public int getQueryMasterPort() {
    return this.queryMasterPort;
  }

  public TGetQueryStatusResponse setQueryMasterPort(int queryMasterPort) {
    this.queryMasterPort = queryMasterPort;
    setQueryMasterPortIsSet(true);
    return this;
  }

  public void unsetQueryMasterPort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUERYMASTERPORT_ISSET_ID);
  }

  /** Returns true if field queryMasterPort is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryMasterPort() {
    return EncodingUtils.testBit(__isset_bitfield, __QUERYMASTERPORT_ISSET_ID);
  }

  public void setQueryMasterPortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUERYMASTERPORT_ISSET_ID, value);
  }

  public TQueryResult getQueryResult() {
    return this.queryResult;
  }

  public TGetQueryStatusResponse setQueryResult(TQueryResult queryResult) {
    this.queryResult = queryResult;
    return this;
  }

  public void unsetQueryResult() {
    this.queryResult = null;
  }

  /** Returns true if field queryResult is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryResult() {
    return this.queryResult != null;
  }

  public void setQueryResultIsSet(boolean value) {
    if (!value) {
      this.queryResult = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESULT_CODE:
      if (value == null) {
        unsetResultCode();
      } else {
        setResultCode((String)value);
      }
      break;

    case QUERY_ID:
      if (value == null) {
        unsetQueryId();
      } else {
        setQueryId((String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((String)value);
      }
      break;

    case PROGRESS:
      if (value == null) {
        unsetProgress();
      } else {
        setProgress((Double)value);
      }
      break;

    case SUBMIT_TIME:
      if (value == null) {
        unsetSubmitTime();
      } else {
        setSubmitTime((Long)value);
      }
      break;

    case FINISH_TIME:
      if (value == null) {
        unsetFinishTime();
      } else {
        setFinishTime((Long)value);
      }
      break;

    case HAS_RESULT:
      if (value == null) {
        unsetHasResult();
      } else {
        setHasResult((Boolean)value);
      }
      break;

    case ERROR_MESSAGE:
      if (value == null) {
        unsetErrorMessage();
      } else {
        setErrorMessage((String)value);
      }
      break;

    case ERROR_TRACE:
      if (value == null) {
        unsetErrorTrace();
      } else {
        setErrorTrace((String)value);
      }
      break;

    case QUERY_MASTER_HOST:
      if (value == null) {
        unsetQueryMasterHost();
      } else {
        setQueryMasterHost((String)value);
      }
      break;

    case QUERY_MASTER_PORT:
      if (value == null) {
        unsetQueryMasterPort();
      } else {
        setQueryMasterPort((Integer)value);
      }
      break;

    case QUERY_RESULT:
      if (value == null) {
        unsetQueryResult();
      } else {
        setQueryResult((TQueryResult)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESULT_CODE:
      return getResultCode();

    case QUERY_ID:
      return getQueryId();

    case STATE:
      return getState();

    case PROGRESS:
      return Double.valueOf(getProgress());

    case SUBMIT_TIME:
      return Long.valueOf(getSubmitTime());

    case FINISH_TIME:
      return Long.valueOf(getFinishTime());

    case HAS_RESULT:
      return Boolean.valueOf(isHasResult());

    case ERROR_MESSAGE:
      return getErrorMessage();

    case ERROR_TRACE:
      return getErrorTrace();

    case QUERY_MASTER_HOST:
      return getQueryMasterHost();

    case QUERY_MASTER_PORT:
      return Integer.valueOf(getQueryMasterPort());

    case QUERY_RESULT:
      return getQueryResult();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESULT_CODE:
      return isSetResultCode();
    case QUERY_ID:
      return isSetQueryId();
    case STATE:
      return isSetState();
    case PROGRESS:
      return isSetProgress();
    case SUBMIT_TIME:
      return isSetSubmitTime();
    case FINISH_TIME:
      return isSetFinishTime();
    case HAS_RESULT:
      return isSetHasResult();
    case ERROR_MESSAGE:
      return isSetErrorMessage();
    case ERROR_TRACE:
      return isSetErrorTrace();
    case QUERY_MASTER_HOST:
      return isSetQueryMasterHost();
    case QUERY_MASTER_PORT:
      return isSetQueryMasterPort();
    case QUERY_RESULT:
      return isSetQueryResult();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TGetQueryStatusResponse)
      return this.equals((TGetQueryStatusResponse)that);
    return false;
  }

  public boolean equals(TGetQueryStatusResponse that) {
    if (that == null)
      return false;

    boolean this_present_resultCode = true && this.isSetResultCode();
    boolean that_present_resultCode = true && that.isSetResultCode();
    if (this_present_resultCode || that_present_resultCode) {
      if (!(this_present_resultCode && that_present_resultCode))
        return false;
      if (!this.resultCode.equals(that.resultCode))
        return false;
    }

    boolean this_present_queryId = true && this.isSetQueryId();
    boolean that_present_queryId = true && that.isSetQueryId();
    if (this_present_queryId || that_present_queryId) {
      if (!(this_present_queryId && that_present_queryId))
        return false;
      if (!this.queryId.equals(that.queryId))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_progress = true;
    boolean that_present_progress = true;
    if (this_present_progress || that_present_progress) {
      if (!(this_present_progress && that_present_progress))
        return false;
      if (this.progress != that.progress)
        return false;
    }

    boolean this_present_submitTime = true;
    boolean that_present_submitTime = true;
    if (this_present_submitTime || that_present_submitTime) {
      if (!(this_present_submitTime && that_present_submitTime))
        return false;
      if (this.submitTime != that.submitTime)
        return false;
    }

    boolean this_present_finishTime = true;
    boolean that_present_finishTime = true;
    if (this_present_finishTime || that_present_finishTime) {
      if (!(this_present_finishTime && that_present_finishTime))
        return false;
      if (this.finishTime != that.finishTime)
        return false;
    }

    boolean this_present_hasResult = true;
    boolean that_present_hasResult = true;
    if (this_present_hasResult || that_present_hasResult) {
      if (!(this_present_hasResult && that_present_hasResult))
        return false;
      if (this.hasResult != that.hasResult)
        return false;
    }

    boolean this_present_errorMessage = true && this.isSetErrorMessage();
    boolean that_present_errorMessage = true && that.isSetErrorMessage();
    if (this_present_errorMessage || that_present_errorMessage) {
      if (!(this_present_errorMessage && that_present_errorMessage))
        return false;
      if (!this.errorMessage.equals(that.errorMessage))
        return false;
    }

    boolean this_present_errorTrace = true && this.isSetErrorTrace();
    boolean that_present_errorTrace = true && that.isSetErrorTrace();
    if (this_present_errorTrace || that_present_errorTrace) {
      if (!(this_present_errorTrace && that_present_errorTrace))
        return false;
      if (!this.errorTrace.equals(that.errorTrace))
        return false;
    }

    boolean this_present_queryMasterHost = true && this.isSetQueryMasterHost();
    boolean that_present_queryMasterHost = true && that.isSetQueryMasterHost();
    if (this_present_queryMasterHost || that_present_queryMasterHost) {
      if (!(this_present_queryMasterHost && that_present_queryMasterHost))
        return false;
      if (!this.queryMasterHost.equals(that.queryMasterHost))
        return false;
    }

    boolean this_present_queryMasterPort = true;
    boolean that_present_queryMasterPort = true;
    if (this_present_queryMasterPort || that_present_queryMasterPort) {
      if (!(this_present_queryMasterPort && that_present_queryMasterPort))
        return false;
      if (this.queryMasterPort != that.queryMasterPort)
        return false;
    }

    boolean this_present_queryResult = true && this.isSetQueryResult();
    boolean that_present_queryResult = true && that.isSetQueryResult();
    if (this_present_queryResult || that_present_queryResult) {
      if (!(this_present_queryResult && that_present_queryResult))
        return false;
      if (!this.queryResult.equals(that.queryResult))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_resultCode = true && (isSetResultCode());
    list.add(present_resultCode);
    if (present_resultCode)
      list.add(resultCode);

    boolean present_queryId = true && (isSetQueryId());
    list.add(present_queryId);
    if (present_queryId)
      list.add(queryId);

    boolean present_state = true && (isSetState());
    list.add(present_state);
    if (present_state)
      list.add(state);

    boolean present_progress = true;
    list.add(present_progress);
    if (present_progress)
      list.add(progress);

    boolean present_submitTime = true;
    list.add(present_submitTime);
    if (present_submitTime)
      list.add(submitTime);

    boolean present_finishTime = true;
    list.add(present_finishTime);
    if (present_finishTime)
      list.add(finishTime);

    boolean present_hasResult = true;
    list.add(present_hasResult);
    if (present_hasResult)
      list.add(hasResult);

    boolean present_errorMessage = true && (isSetErrorMessage());
    list.add(present_errorMessage);
    if (present_errorMessage)
      list.add(errorMessage);

    boolean present_errorTrace = true && (isSetErrorTrace());
    list.add(present_errorTrace);
    if (present_errorTrace)
      list.add(errorTrace);

    boolean present_queryMasterHost = true && (isSetQueryMasterHost());
    list.add(present_queryMasterHost);
    if (present_queryMasterHost)
      list.add(queryMasterHost);

    boolean present_queryMasterPort = true;
    list.add(present_queryMasterPort);
    if (present_queryMasterPort)
      list.add(queryMasterPort);

    boolean present_queryResult = true && (isSetQueryResult());
    list.add(present_queryResult);
    if (present_queryResult)
      list.add(queryResult);

    return list.hashCode();
  }

  @Override
  public int compareTo(TGetQueryStatusResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResultCode()).compareTo(other.isSetResultCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultCode, other.resultCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryId()).compareTo(other.isSetQueryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryId, other.queryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProgress()).compareTo(other.isSetProgress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.progress, other.progress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubmitTime()).compareTo(other.isSetSubmitTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubmitTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.submitTime, other.submitTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinishTime()).compareTo(other.isSetFinishTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finishTime, other.finishTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasResult()).compareTo(other.isSetHasResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasResult, other.hasResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrorMessage()).compareTo(other.isSetErrorMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorMessage, other.errorMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrorTrace()).compareTo(other.isSetErrorTrace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorTrace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorTrace, other.errorTrace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryMasterHost()).compareTo(other.isSetQueryMasterHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryMasterHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryMasterHost, other.queryMasterHost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryMasterPort()).compareTo(other.isSetQueryMasterPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryMasterPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryMasterPort, other.queryMasterPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryResult()).compareTo(other.isSetQueryResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryResult, other.queryResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TGetQueryStatusResponse(");
    boolean first = true;

    sb.append("resultCode:");
    if (this.resultCode == null) {
      sb.append("null");
    } else {
      sb.append(this.resultCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryId:");
    if (this.queryId == null) {
      sb.append("null");
    } else {
      sb.append(this.queryId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("progress:");
    sb.append(this.progress);
    first = false;
    if (!first) sb.append(", ");
    sb.append("submitTime:");
    sb.append(this.submitTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("finishTime:");
    sb.append(this.finishTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasResult:");
    sb.append(this.hasResult);
    first = false;
    if (!first) sb.append(", ");
    sb.append("errorMessage:");
    if (this.errorMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.errorMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("errorTrace:");
    if (this.errorTrace == null) {
      sb.append("null");
    } else {
      sb.append(this.errorTrace);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryMasterHost:");
    if (this.queryMasterHost == null) {
      sb.append("null");
    } else {
      sb.append(this.queryMasterHost);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryMasterPort:");
    sb.append(this.queryMasterPort);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryResult:");
    if (this.queryResult == null) {
      sb.append("null");
    } else {
      sb.append(this.queryResult);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
    if (queryResult != null) {
      queryResult.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TGetQueryStatusResponseStandardSchemeFactory implements SchemeFactory {
    public TGetQueryStatusResponseStandardScheme getScheme() {
      return new TGetQueryStatusResponseStandardScheme();
    }
  }

  private static class TGetQueryStatusResponseStandardScheme extends StandardScheme<TGetQueryStatusResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TGetQueryStatusResponse struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESULT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resultCode = iprot.readString();
              struct.setResultCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queryId = iprot.readString();
              struct.setQueryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.state = iprot.readString();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROGRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.progress = iprot.readDouble();
              struct.setProgressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SUBMIT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.submitTime = iprot.readI64();
              struct.setSubmitTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FINISH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.finishTime = iprot.readI64();
              struct.setFinishTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HAS_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasResult = iprot.readBool();
              struct.setHasResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ERROR_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorMessage = iprot.readString();
              struct.setErrorMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ERROR_TRACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorTrace = iprot.readString();
              struct.setErrorTraceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // QUERY_MASTER_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queryMasterHost = iprot.readString();
              struct.setQueryMasterHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // QUERY_MASTER_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.queryMasterPort = iprot.readI32();
              struct.setQueryMasterPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // QUERY_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.queryResult = new TQueryResult();
              struct.queryResult.read(iprot);
              struct.setQueryResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TGetQueryStatusResponse struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.resultCode != null) {
        oprot.writeFieldBegin(RESULT_CODE_FIELD_DESC);
        oprot.writeString(struct.resultCode);
        oprot.writeFieldEnd();
      }
      if (struct.queryId != null) {
        oprot.writeFieldBegin(QUERY_ID_FIELD_DESC);
        oprot.writeString(struct.queryId);
        oprot.writeFieldEnd();
      }
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeString(struct.state);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROGRESS_FIELD_DESC);
      oprot.writeDouble(struct.progress);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUBMIT_TIME_FIELD_DESC);
      oprot.writeI64(struct.submitTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FINISH_TIME_FIELD_DESC);
      oprot.writeI64(struct.finishTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_RESULT_FIELD_DESC);
      oprot.writeBool(struct.hasResult);
      oprot.writeFieldEnd();
      if (struct.errorMessage != null) {
        oprot.writeFieldBegin(ERROR_MESSAGE_FIELD_DESC);
        oprot.writeString(struct.errorMessage);
        oprot.writeFieldEnd();
      }
      if (struct.errorTrace != null) {
        oprot.writeFieldBegin(ERROR_TRACE_FIELD_DESC);
        oprot.writeString(struct.errorTrace);
        oprot.writeFieldEnd();
      }
      if (struct.queryMasterHost != null) {
        oprot.writeFieldBegin(QUERY_MASTER_HOST_FIELD_DESC);
        oprot.writeString(struct.queryMasterHost);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QUERY_MASTER_PORT_FIELD_DESC);
      oprot.writeI32(struct.queryMasterPort);
      oprot.writeFieldEnd();
      if (struct.queryResult != null) {
        oprot.writeFieldBegin(QUERY_RESULT_FIELD_DESC);
        struct.queryResult.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TGetQueryStatusResponseTupleSchemeFactory implements SchemeFactory {
    public TGetQueryStatusResponseTupleScheme getScheme() {
      return new TGetQueryStatusResponseTupleScheme();
    }
  }

  private static class TGetQueryStatusResponseTupleScheme extends TupleScheme<TGetQueryStatusResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TGetQueryStatusResponse struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetResultCode()) {
        optionals.set(0);
      }
      if (struct.isSetQueryId()) {
        optionals.set(1);
      }
      if (struct.isSetState()) {
        optionals.set(2);
      }
      if (struct.isSetProgress()) {
        optionals.set(3);
      }
      if (struct.isSetSubmitTime()) {
        optionals.set(4);
      }
      if (struct.isSetFinishTime()) {
        optionals.set(5);
      }
      if (struct.isSetHasResult()) {
        optionals.set(6);
      }
      if (struct.isSetErrorMessage()) {
        optionals.set(7);
      }
      if (struct.isSetErrorTrace()) {
        optionals.set(8);
      }
      if (struct.isSetQueryMasterHost()) {
        optionals.set(9);
      }
      if (struct.isSetQueryMasterPort()) {
        optionals.set(10);
      }
      if (struct.isSetQueryResult()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetResultCode()) {
        oprot.writeString(struct.resultCode);
      }
      if (struct.isSetQueryId()) {
        oprot.writeString(struct.queryId);
      }
      if (struct.isSetState()) {
        oprot.writeString(struct.state);
      }
      if (struct.isSetProgress()) {
        oprot.writeDouble(struct.progress);
      }
      if (struct.isSetSubmitTime()) {
        oprot.writeI64(struct.submitTime);
      }
      if (struct.isSetFinishTime()) {
        oprot.writeI64(struct.finishTime);
      }
      if (struct.isSetHasResult()) {
        oprot.writeBool(struct.hasResult);
      }
      if (struct.isSetErrorMessage()) {
        oprot.writeString(struct.errorMessage);
      }
      if (struct.isSetErrorTrace()) {
        oprot.writeString(struct.errorTrace);
      }
      if (struct.isSetQueryMasterHost()) {
        oprot.writeString(struct.queryMasterHost);
      }
      if (struct.isSetQueryMasterPort()) {
        oprot.writeI32(struct.queryMasterPort);
      }
      if (struct.isSetQueryResult()) {
        struct.queryResult.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TGetQueryStatusResponse struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.resultCode = iprot.readString();
        struct.setResultCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.queryId = iprot.readString();
        struct.setQueryIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.state = iprot.readString();
        struct.setStateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.progress = iprot.readDouble();
        struct.setProgressIsSet(true);
      }
      if (incoming.get(4)) {
        struct.submitTime = iprot.readI64();
        struct.setSubmitTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.finishTime = iprot.readI64();
        struct.setFinishTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.hasResult = iprot.readBool();
        struct.setHasResultIsSet(true);
      }
      if (incoming.get(7)) {
        struct.errorMessage = iprot.readString();
        struct.setErrorMessageIsSet(true);
      }
      if (incoming.get(8)) {
        struct.errorTrace = iprot.readString();
        struct.setErrorTraceIsSet(true);
      }
      if (incoming.get(9)) {
        struct.queryMasterHost = iprot.readString();
        struct.setQueryMasterHostIsSet(true);
      }
      if (incoming.get(10)) {
        struct.queryMasterPort = iprot.readI32();
        struct.setQueryMasterPortIsSet(true);
      }
      if (incoming.get(11)) {
        struct.queryResult = new TQueryResult();
        struct.queryResult.read(iprot);
        struct.setQueryResultIsSet(true);
      }
    }
  }

}

