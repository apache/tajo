/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.tajo.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-12-20")
public class TServerResponse implements org.apache.thrift.TBase<TServerResponse, TServerResponse._Fields>, java.io.Serializable, Cloneable, Comparable<TServerResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TServerResponse");

  private static final org.apache.thrift.protocol.TField RESULT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("resultCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BOOL_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("boolResult", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField ERROR_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorMessage", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DETAIL_ERROR_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("detailErrorMessage", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TServerResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TServerResponseTupleSchemeFactory());
  }

  public String resultCode; // required
  public boolean boolResult; // required
  public String errorMessage; // required
  public String detailErrorMessage; // required
  public String sessionId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESULT_CODE((short)1, "resultCode"),
    BOOL_RESULT((short)2, "boolResult"),
    ERROR_MESSAGE((short)3, "errorMessage"),
    DETAIL_ERROR_MESSAGE((short)4, "detailErrorMessage"),
    SESSION_ID((short)5, "sessionId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESULT_CODE
          return RESULT_CODE;
        case 2: // BOOL_RESULT
          return BOOL_RESULT;
        case 3: // ERROR_MESSAGE
          return ERROR_MESSAGE;
        case 4: // DETAIL_ERROR_MESSAGE
          return DETAIL_ERROR_MESSAGE;
        case 5: // SESSION_ID
          return SESSION_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BOOLRESULT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESULT_CODE, new org.apache.thrift.meta_data.FieldMetaData("resultCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BOOL_RESULT, new org.apache.thrift.meta_data.FieldMetaData("boolResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ERROR_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("errorMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DETAIL_ERROR_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("detailErrorMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TServerResponse.class, metaDataMap);
  }

  public TServerResponse() {
  }

  public TServerResponse(
    String resultCode,
    boolean boolResult,
    String errorMessage,
    String detailErrorMessage,
    String sessionId)
  {
    this();
    this.resultCode = resultCode;
    this.boolResult = boolResult;
    setBoolResultIsSet(true);
    this.errorMessage = errorMessage;
    this.detailErrorMessage = detailErrorMessage;
    this.sessionId = sessionId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TServerResponse(TServerResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetResultCode()) {
      this.resultCode = other.resultCode;
    }
    this.boolResult = other.boolResult;
    if (other.isSetErrorMessage()) {
      this.errorMessage = other.errorMessage;
    }
    if (other.isSetDetailErrorMessage()) {
      this.detailErrorMessage = other.detailErrorMessage;
    }
    if (other.isSetSessionId()) {
      this.sessionId = other.sessionId;
    }
  }

  public TServerResponse deepCopy() {
    return new TServerResponse(this);
  }

  @Override
  public void clear() {
    this.resultCode = null;
    setBoolResultIsSet(false);
    this.boolResult = false;
    this.errorMessage = null;
    this.detailErrorMessage = null;
    this.sessionId = null;
  }

  public String getResultCode() {
    return this.resultCode;
  }

  public TServerResponse setResultCode(String resultCode) {
    this.resultCode = resultCode;
    return this;
  }

  public void unsetResultCode() {
    this.resultCode = null;
  }

  /** Returns true if field resultCode is set (has been assigned a value) and false otherwise */
  public boolean isSetResultCode() {
    return this.resultCode != null;
  }

  public void setResultCodeIsSet(boolean value) {
    if (!value) {
      this.resultCode = null;
    }
  }

  public boolean isBoolResult() {
    return this.boolResult;
  }

  public TServerResponse setBoolResult(boolean boolResult) {
    this.boolResult = boolResult;
    setBoolResultIsSet(true);
    return this;
  }

  public void unsetBoolResult() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOOLRESULT_ISSET_ID);
  }

  /** Returns true if field boolResult is set (has been assigned a value) and false otherwise */
  public boolean isSetBoolResult() {
    return EncodingUtils.testBit(__isset_bitfield, __BOOLRESULT_ISSET_ID);
  }

  public void setBoolResultIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOOLRESULT_ISSET_ID, value);
  }

  public String getErrorMessage() {
    return this.errorMessage;
  }

  public TServerResponse setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  public void unsetErrorMessage() {
    this.errorMessage = null;
  }

  /** Returns true if field errorMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorMessage() {
    return this.errorMessage != null;
  }

  public void setErrorMessageIsSet(boolean value) {
    if (!value) {
      this.errorMessage = null;
    }
  }

  public String getDetailErrorMessage() {
    return this.detailErrorMessage;
  }

  public TServerResponse setDetailErrorMessage(String detailErrorMessage) {
    this.detailErrorMessage = detailErrorMessage;
    return this;
  }

  public void unsetDetailErrorMessage() {
    this.detailErrorMessage = null;
  }

  /** Returns true if field detailErrorMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetDetailErrorMessage() {
    return this.detailErrorMessage != null;
  }

  public void setDetailErrorMessageIsSet(boolean value) {
    if (!value) {
      this.detailErrorMessage = null;
    }
  }

  public String getSessionId() {
    return this.sessionId;
  }

  public TServerResponse setSessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  public void unsetSessionId() {
    this.sessionId = null;
  }

  /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionId() {
    return this.sessionId != null;
  }

  public void setSessionIdIsSet(boolean value) {
    if (!value) {
      this.sessionId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESULT_CODE:
      if (value == null) {
        unsetResultCode();
      } else {
        setResultCode((String)value);
      }
      break;

    case BOOL_RESULT:
      if (value == null) {
        unsetBoolResult();
      } else {
        setBoolResult((Boolean)value);
      }
      break;

    case ERROR_MESSAGE:
      if (value == null) {
        unsetErrorMessage();
      } else {
        setErrorMessage((String)value);
      }
      break;

    case DETAIL_ERROR_MESSAGE:
      if (value == null) {
        unsetDetailErrorMessage();
      } else {
        setDetailErrorMessage((String)value);
      }
      break;

    case SESSION_ID:
      if (value == null) {
        unsetSessionId();
      } else {
        setSessionId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESULT_CODE:
      return getResultCode();

    case BOOL_RESULT:
      return Boolean.valueOf(isBoolResult());

    case ERROR_MESSAGE:
      return getErrorMessage();

    case DETAIL_ERROR_MESSAGE:
      return getDetailErrorMessage();

    case SESSION_ID:
      return getSessionId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESULT_CODE:
      return isSetResultCode();
    case BOOL_RESULT:
      return isSetBoolResult();
    case ERROR_MESSAGE:
      return isSetErrorMessage();
    case DETAIL_ERROR_MESSAGE:
      return isSetDetailErrorMessage();
    case SESSION_ID:
      return isSetSessionId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TServerResponse)
      return this.equals((TServerResponse)that);
    return false;
  }

  public boolean equals(TServerResponse that) {
    if (that == null)
      return false;

    boolean this_present_resultCode = true && this.isSetResultCode();
    boolean that_present_resultCode = true && that.isSetResultCode();
    if (this_present_resultCode || that_present_resultCode) {
      if (!(this_present_resultCode && that_present_resultCode))
        return false;
      if (!this.resultCode.equals(that.resultCode))
        return false;
    }

    boolean this_present_boolResult = true;
    boolean that_present_boolResult = true;
    if (this_present_boolResult || that_present_boolResult) {
      if (!(this_present_boolResult && that_present_boolResult))
        return false;
      if (this.boolResult != that.boolResult)
        return false;
    }

    boolean this_present_errorMessage = true && this.isSetErrorMessage();
    boolean that_present_errorMessage = true && that.isSetErrorMessage();
    if (this_present_errorMessage || that_present_errorMessage) {
      if (!(this_present_errorMessage && that_present_errorMessage))
        return false;
      if (!this.errorMessage.equals(that.errorMessage))
        return false;
    }

    boolean this_present_detailErrorMessage = true && this.isSetDetailErrorMessage();
    boolean that_present_detailErrorMessage = true && that.isSetDetailErrorMessage();
    if (this_present_detailErrorMessage || that_present_detailErrorMessage) {
      if (!(this_present_detailErrorMessage && that_present_detailErrorMessage))
        return false;
      if (!this.detailErrorMessage.equals(that.detailErrorMessage))
        return false;
    }

    boolean this_present_sessionId = true && this.isSetSessionId();
    boolean that_present_sessionId = true && that.isSetSessionId();
    if (this_present_sessionId || that_present_sessionId) {
      if (!(this_present_sessionId && that_present_sessionId))
        return false;
      if (!this.sessionId.equals(that.sessionId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_resultCode = true && (isSetResultCode());
    list.add(present_resultCode);
    if (present_resultCode)
      list.add(resultCode);

    boolean present_boolResult = true;
    list.add(present_boolResult);
    if (present_boolResult)
      list.add(boolResult);

    boolean present_errorMessage = true && (isSetErrorMessage());
    list.add(present_errorMessage);
    if (present_errorMessage)
      list.add(errorMessage);

    boolean present_detailErrorMessage = true && (isSetDetailErrorMessage());
    list.add(present_detailErrorMessage);
    if (present_detailErrorMessage)
      list.add(detailErrorMessage);

    boolean present_sessionId = true && (isSetSessionId());
    list.add(present_sessionId);
    if (present_sessionId)
      list.add(sessionId);

    return list.hashCode();
  }

  @Override
  public int compareTo(TServerResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResultCode()).compareTo(other.isSetResultCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultCode, other.resultCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoolResult()).compareTo(other.isSetBoolResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoolResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boolResult, other.boolResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrorMessage()).compareTo(other.isSetErrorMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorMessage, other.errorMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetailErrorMessage()).compareTo(other.isSetDetailErrorMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetailErrorMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailErrorMessage, other.detailErrorMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TServerResponse(");
    boolean first = true;

    sb.append("resultCode:");
    if (this.resultCode == null) {
      sb.append("null");
    } else {
      sb.append(this.resultCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("boolResult:");
    sb.append(this.boolResult);
    first = false;
    if (!first) sb.append(", ");
    sb.append("errorMessage:");
    if (this.errorMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.errorMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("detailErrorMessage:");
    if (this.detailErrorMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.detailErrorMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sessionId:");
    if (this.sessionId == null) {
      sb.append("null");
    } else {
      sb.append(this.sessionId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TServerResponseStandardSchemeFactory implements SchemeFactory {
    public TServerResponseStandardScheme getScheme() {
      return new TServerResponseStandardScheme();
    }
  }

  private static class TServerResponseStandardScheme extends StandardScheme<TServerResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TServerResponse struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESULT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resultCode = iprot.readString();
              struct.setResultCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BOOL_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.boolResult = iprot.readBool();
              struct.setBoolResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ERROR_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorMessage = iprot.readString();
              struct.setErrorMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DETAIL_ERROR_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.detailErrorMessage = iprot.readString();
              struct.setDetailErrorMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sessionId = iprot.readString();
              struct.setSessionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TServerResponse struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.resultCode != null) {
        oprot.writeFieldBegin(RESULT_CODE_FIELD_DESC);
        oprot.writeString(struct.resultCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BOOL_RESULT_FIELD_DESC);
      oprot.writeBool(struct.boolResult);
      oprot.writeFieldEnd();
      if (struct.errorMessage != null) {
        oprot.writeFieldBegin(ERROR_MESSAGE_FIELD_DESC);
        oprot.writeString(struct.errorMessage);
        oprot.writeFieldEnd();
      }
      if (struct.detailErrorMessage != null) {
        oprot.writeFieldBegin(DETAIL_ERROR_MESSAGE_FIELD_DESC);
        oprot.writeString(struct.detailErrorMessage);
        oprot.writeFieldEnd();
      }
      if (struct.sessionId != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(struct.sessionId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TServerResponseTupleSchemeFactory implements SchemeFactory {
    public TServerResponseTupleScheme getScheme() {
      return new TServerResponseTupleScheme();
    }
  }

  private static class TServerResponseTupleScheme extends TupleScheme<TServerResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TServerResponse struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetResultCode()) {
        optionals.set(0);
      }
      if (struct.isSetBoolResult()) {
        optionals.set(1);
      }
      if (struct.isSetErrorMessage()) {
        optionals.set(2);
      }
      if (struct.isSetDetailErrorMessage()) {
        optionals.set(3);
      }
      if (struct.isSetSessionId()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetResultCode()) {
        oprot.writeString(struct.resultCode);
      }
      if (struct.isSetBoolResult()) {
        oprot.writeBool(struct.boolResult);
      }
      if (struct.isSetErrorMessage()) {
        oprot.writeString(struct.errorMessage);
      }
      if (struct.isSetDetailErrorMessage()) {
        oprot.writeString(struct.detailErrorMessage);
      }
      if (struct.isSetSessionId()) {
        oprot.writeString(struct.sessionId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TServerResponse struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.resultCode = iprot.readString();
        struct.setResultCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.boolResult = iprot.readBool();
        struct.setBoolResultIsSet(true);
      }
      if (incoming.get(2)) {
        struct.errorMessage = iprot.readString();
        struct.setErrorMessageIsSet(true);
      }
      if (incoming.get(3)) {
        struct.detailErrorMessage = iprot.readString();
        struct.setDetailErrorMessageIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sessionId = iprot.readString();
        struct.setSessionIdIsSet(true);
      }
    }
  }

}

